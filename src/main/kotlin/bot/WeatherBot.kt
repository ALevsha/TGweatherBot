package bot

import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.callbackQuery
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.dispatcher.location
import com.github.kotlintelegrambot.dispatcher.message
import com.github.kotlintelegrambot.entities.ChatAction
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.TelegramFile
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import data.remote.API_KEY
import data.remote.models.openweathermap.Coord
import data.remote.repository.WeatherRepository
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

private const val GIF_WAITING_URL = "https://media.tenor.com/OBEfKgDoCogAAAAC/pulp-fiction-john-travolta.gif"

private const val BOT_ANSWER_TIMEOUT = 30 // timeout, –≤ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –º–æ–∂–µ—Ç –¥–∞—Ç—å –æ—Ç–≤–µ—Ç
private const val BOT_TOKEN = "5975392537:AAFRa5MjfJOwNUkdAwh27pQo7ivRDKr7_x4" // –≤ –∏–¥–µ–∞–ª–µ –≤—ã–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä


class WeatherBot(private val weatherRepository: WeatherRepository) {

    private lateinit var cityCoord: Coord
    private lateinit var cityName: String
    private var _chatId: ChatId? = null
    private val chatId by lazy { requireNotNull(_chatId) } // –≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ null –∏–Ω–∞—á–µ Exception
    fun createBot(): Bot {
        return bot {
            timeout = BOT_ANSWER_TIMEOUT
            token = BOT_TOKEN
            logLevel = com.github.kotlintelegrambot.logging.LogLevel.Error

            dispatch {// –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                setUpCommands()
                setUpCallbacks()
            }
        }
    }

    private fun com.github.kotlintelegrambot.dispatcher.Dispatcher.setUpCallbacks() {
        callbackQuery(callbackData = "getMyLocation") {
            bot.sendMessage(chatId = chatId, text = "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é")
            location {
                CoroutineScope(Dispatchers.IO).launch {
                    val userCity = weatherRepository.getCityName(
                        location.latitude.toString(),
                        location.longitude.toString()
                    )

                    cityCoord = Coord(userCity.lat.toDouble(), userCity.lon.toDouble())
                    cityName = userCity.display_name

                    val inlineKeyboardMarkup = InlineKeyboardMarkup.create(
                        listOf(
                            InlineKeyboardButton.CallbackData(
                                text = "–î–∞, –≤–µ—Ä–Ω–æ",
                                callbackData = "yes_label"
                            )
                        )
                    )

                    bot.sendMessage(
                        chatId = chatId,
                        text = "–¢–≤–æ–π –≥–æ—Ä–æ–¥ - ${cityName}, –≤–µ—Ä–Ω–æ? \n –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ, —Å–∫–∏–Ω—å –ª–æ–∫–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑",
                        replyMarkup = inlineKeyboardMarkup
                    )
                }
            }
        }

        callbackQuery(callbackData = "enterManually") {
            bot.sendMessage(chatId = chatId, text = "–•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥.")
            message(com.github.kotlintelegrambot.extensions.filters.Filter.Text) {
                cityName = message.text.toString()

                val inlineKeyboardMarkup = InlineKeyboardMarkup.create(
                    listOf(
                        InlineKeyboardButton.CallbackData(
                            text = "–î–∞, –≤–µ—Ä–Ω–æ",
                            callbackData = "yes_label"
                        )
                    )
                )

                CoroutineScope(Dispatchers.IO).launch{
                    val request = weatherRepository.getCityCoord(
                        city = cityName,
                        country = "Russia",
                        format = "json"
                    )

                    cityCoord = Coord(request[0].lat.toDouble(),request[0].lon.toDouble())
                }


                bot.sendMessage(
                    chatId = chatId,
                    text = "–¢–≤–æ–π –≥–æ—Ä–æ–¥ - ${cityName}, –≤–µ—Ä–Ω–æ? \n –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –µ—â–µ —Ä–∞–∑",
                    replyMarkup = inlineKeyboardMarkup
                )

            }
        }

        callbackQuery(callbackData = "yes_label") {
            bot.apply {
                sendAnimation(
                    chatId = chatId,
                    animation = TelegramFile.ByUrl(GIF_WAITING_URL)
                )

                sendMessage(
                    chatId = chatId,
                    text = "–£–∑–Ω–∞–µ–º –≤–∞—à—É –ø–æ–≥–æ–¥—É..."
                )

                sendChatAction(
                    chatId = chatId,
                    action = ChatAction.TYPING
                )
            }
            CoroutineScope(Dispatchers.IO).launch {
                val currentWeather = weatherRepository.getCurrentWeather(
                    lat = cityCoord.lat.toString(),
                    lon = cityCoord.lon.toString(),
                    apiKey = API_KEY
                )
                bot.sendMessage(
                    chatId = chatId,
                    text = """
                        ‚òÅ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${currentWeather.clouds.all}%
                        üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–≥—Ä–∞–¥—É—Å—ã): ${(currentWeather.main.temp - 273).toInt()}
                        üôé ‚Äç–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ${(currentWeather.main.feels_like - 273).toInt()}
                        üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${currentWeather.main.humidity}%
                        üå™ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ (–∞–∑–∏–º—É—Ç): ${currentWeather.wind.deg}
                        üå™ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–º/—Å): ${currentWeather.wind.speed}
                        üß≠ –î–∞–≤–ª–µ–Ω–∏–µ: ${currentWeather.main.pressure}
                    """.trimIndent()
                    )
                bot.sendMessage(chatId = chatId, text = "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≥–æ–¥—É –µ—â–µ —Ä–∞–∑,\n" +
                        " –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /weather")
                cityCoord = Coord(0.0,0.0)
            }
        }
    }

    private fun com.github.kotlintelegrambot.dispatcher.Dispatcher.setUpCommands() {
        command("start") {
            _chatId = ChatId.fromId(message.chat.id)
            bot.sendMessage(
                chatId = chatId,
                text = "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–≥–æ–¥—É! \n –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /weather"
            )
        }

        command("weather") {
            val inlineKeyboardMarkup = InlineKeyboardMarkup.create(
                listOf(
                    InlineKeyboardButton.CallbackData(
                        text = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–π –≥–æ—Ä–æ–¥ (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤)",
                        callbackData = "getMyLocation"
                    )
                ),
                listOf(
                    InlineKeyboardButton.CallbackData(
                        text = "–í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é",
                        callbackData = "enterManually"
                    )
                )
            )

            bot.sendMessage(
                chatId = chatId,
                text = "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –ø–æ–≥–æ–¥—É, \n –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ–π –≥–æ—Ä–æ–¥.",
                replyMarkup = inlineKeyboardMarkup
            )
        }
    }
}